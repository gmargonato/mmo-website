import { useState, useEffect, useRef } from 'react'
import { supabase } from '../../lib/supabase'
import { useAuth } from '../../contexts/AuthContext'
import ReactQuill from 'react-quill'
import 'react-quill/dist/quill.snow.css'

function NewArticleDialog({ isOpen, onClose, onSuccess, editingArticle = null }) {
  const { user } = useAuth()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [success, setSuccess] = useState(false)
  const [title, setTitle] = useState('')
  const [message, setMessage] = useState('')
  const [category, setCategory] = useState('technical')
  // Removed editorMode state - now using combined editor
  const [selectedImage, setSelectedImage] = useState(null)

  const categories = [
    { value: 'community', label: 'Comunidade', icon: 'ui/news_community.gif' },
    { value: 'dev', label: 'Desenvolvimento', icon: 'ui/news_dev.gif' },
    { value: 'support', label: 'Suporte', icon: 'ui/news_support.gif' },
  ]

  // Rich Text Editor configuration
  const modules = {
    toolbar: [
      ['bold', 'italic', 'underline', 'strike'],
      [{ 'list': 'bullet' }],
      [{ 'color': [] }, { 'background': [] }],
      ['link'],
      ['clean']
    ],
  }

  const formats = [
    'header', 'bold', 'italic', 'underline', 'strike',
    'list', 'bullet', 'color', 'background', 'link'
  ]

  const handleEditorChange = (content, delta, source, editor) => {
    setMessage(content)
  }

  const handleImageUpload = (event) => {
    const file = event.target.files[0]
    if (file) {
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif']
      if (allowedTypes.includes(file.type)) {
        setSelectedImage(file)
      } else {
        alert('Por favor, selecione apenas arquivos de imagem (JPG, JPEG, PNG, GIF)')
        event.target.value = ''
      }
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setError(null)
    setSuccess(false)
    setLoading(true)

    try {
      // Check if user is authenticated
      if (!user) {
        throw new Error('Você precisa estar logado para criar um artigo.')
      }

      let imageUrl = null

      // Upload image if selected
      if (selectedImage) {
        // Generate unique filename
        const fileExt = selectedImage.name.split('.').pop()
        const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`
        const filePath = `articles/${fileName}`

        // Upload to Supabase Storage
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('public_external')
          .upload(filePath, selectedImage, {
            cacheControl: '3600',
            upsert: false
          })

        if (uploadError) {
          throw new Error(`Erro ao fazer upload da imagem: ${uploadError.message}`)
        }

        // Get public URL
        const { data: urlData } = supabase.storage
          .from('public_external')
          .getPublicUrl(filePath)

        imageUrl = urlData.publicUrl
      }

      // Insert or update article with image URL
      let error
      if (editingArticle) {
        // Update existing article
        const updateData = {
          title,
          category,
          html_body: message
        }
        
        // Only update image if a new one was selected
        if (imageUrl) {
          updateData.image = imageUrl
        }
        
        const result = await supabase
          .from('news_article')
          .update(updateData)
          .eq('id', editingArticle.id)
        
        error = result.error
      } else {
        // Insert new article
        const result = await supabase
          .from('news_article')
          .insert([
            {
              title,
              category,
              html_body: message,
              image: imageUrl,
              author: user.id
              // id and created_at are auto-generated by the database
            }
          ])
        
        error = result.error
      }

      if (error) throw error

      setSuccess(true)
      setTitle('')
      setMessage('')
      setSelectedImage(null)
      
      // Refresh the news list
      onSuccess()
      
      // Close dialog after showing success message
      setTimeout(() => {
        onClose()
      }, 1500)
    } catch (err) {
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  // Reset states when dialog opens or load editing data
  useEffect(() => {
    if (isOpen) {
      setError(null)
      setSuccess(false)
      setLoading(false)
      
      if (editingArticle) {
        // Pre-fill form with existing article data
        setTitle(editingArticle.title || '')
        setMessage(editingArticle.html_body || '')
        setCategory(editingArticle.category || 'technical')
        setSelectedImage(null) // Don't pre-load existing image file
      } else {
        // Reset form for new article
        setTitle('')
        setMessage('')
        setCategory('technical')
        setSelectedImage(null)
      }
    }
  }, [isOpen, editingArticle])

  if (!isOpen) return null

  return (
    <div className="fixed -inset-6 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="new-article-dialog bg-backgroundBeige border-4 border-gray-500 ring-1 ring-black max-w-2xl w-full max-h-[90vh] flex flex-col relative">
        {/* Header */}
        <div 
          className="px-4 py-0 flex justify-between items-center"
          style={{
            backgroundImage: 'url("ui/title-blue.jpg")',
            backgroundRepeat: 'repeat-x',
            backgroundPosition: 'left top'
          }}
        >
          <h1 className="text-fontBeige font-martel text-2xl flex items-center"
          style={{
            textShadow: '-1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000'
          }}
          >{editingArticle ? 'Editar Artigo' : 'Adicionar Artigo'}</h1>
          <button 
            onClick={onClose}
            className="text-blue hover:text-red-500"
          >
            <svg width="24"  height="24"  viewBox="0 0 24 24"  fill="currentColor"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M19 2h-14a3 3 0 0 0 -3 3v14a3 3 0 0 0 3 3h14a3 3 0 0 0 3 -3v-14a3 3 0 0 0 -3 -3zm-9.387 6.21l.094 .083l2.293 2.292l2.293 -2.292a1 1 0 0 1 1.497 1.32l-.083 .094l-2.292 2.293l2.292 2.293a1 1 0 0 1 -1.32 1.497l-.094 -.083l-2.293 -2.292l-2.293 2.292a1 1 0 0 1 -1.497 -1.32l.083 -.094l2.292 -2.293l-2.292 -2.293a1 1 0 0 1 1.32 -1.497z" /></svg>
          </button>
        </div>

        {/* Content */}
        <div className="p-4 space-y-4 overflow-y-auto flex-1">
          {/* Feedback Messages */}
          {error && (
            <div className="bg-backgroundBeigeDark border-4 border-gray-500 text-[#EF001A] px-4 py-2 flex items-center gap-2">
              <img src="ui/attentionsign.gif" className="w-8" />
              <div>
                <p className="font-bold">O seguinte erro ocorreu:</p>
                {error}
              </div>
            </div>
          )}
          
          {success && (
            <div className="bg-backgroundBeigeDark border-4 border-gray-500 text-green-700 px-4 py-2 flex items-center gap-2">
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <p className="font-bold">Artigo postado com sucesso!</p>
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-4">
            
            {/* Category Selection */}
            <div className="space-y-2">
              <label className="block text-[#5A2800] font-bold mb-2">
                Categoria:
              </label>
              <div className="bg-backgroundBeigeDark p-3 border-2 border-[#FAF0D7] ring-2 ring-[#5F4D41] shadow-[5px_8px_4px_rgba(135,96,63,0.9)] space-y-2">
                {categories.map(cat => (
                  <label key={cat.value} className="flex items-center gap-3 cursor-pointer hover:bg-[#E6D5B9] p-1 rounded">
                    <input
                      type="radio"
                      name="category"
                      value={cat.value}
                      checked={category === cat.value}
                      onChange={(e) => setCategory(e.target.value)}
                      className="w-4 h-4 cursor-pointer"
                      required
                    />
                    <img src={cat.icon} alt="" className="w-4 h-4" />
                    <span className="text-[#5A2800]">{cat.label}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Title Input */}
            <div className="space-y-2">
              <label className="block text-[#5A2800] font-bold">Título</label>
              <div 
                className="px-4 py-0.5"
                style={{
                  backgroundImage: 'url("ui/title-red.gif")',
                  backgroundRepeat: 'repeat-x',
                  backgroundPosition: 'left top'
                }}
              >
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="w-full bg-transparent text-white font-bold text-sm focus:outline-none"
                  required
                  maxLength={70}
                />
              </div>
            </div>

            {/* Rich Text Editor */}
            <div className="space-y-2">
              <label className="block text-[#5A2800] font-bold">Corpo</label>

              <ReactQuill
                theme="snow"
                value={message}
                onChange={handleEditorChange}
                modules={modules}
                formats={formats}
                className="bg-white"
                style={{
                  minHeight: '200px'
                }}
              />

              {/* Hidden input to maintain form validation */}
              <input
                type="hidden"
                value={message}
                required
              />
            </div>

            {/* Image Attachment */}
            <div className="space-y-2">
              <label className="block text-[#5A2800] font-bold">Imagem (opcional)</label>
              <div className="bg-backgroundBeigeDark p-3 border-2 border-[#FAF0D7] ring-2 ring-[#5F4D41] shadow-[5px_8px_4px_rgba(135,96,63,0.9)]">

                {/* File Input */}
                <div className="flex items-center gap-3 mb-3">
                  <input
                    type="file"
                    accept="image/jpeg,image/jpg,image/png,image/gif"
                    onChange={handleImageUpload}
                    className="text-sm text-[#5A2800] file:mr-4 file:py-1 file:px-2 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-[#FAF0D7] file:text-[#5A2800] hover:file:bg-[#E6D5B9]"
                    id="image-upload"
                  />
                </div>

                {/* Image Preview */}
                {(selectedImage || (editingArticle && editingArticle.image)) && (
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <span className="text-[#5A2800] font-semibold">Preview:</span>
                      <button
                        type="button"
                        onClick={() => {
                          setSelectedImage(null)
                          // Reset file input
                          const fileInput = document.getElementById('image-upload')
                          if (fileInput) fileInput.value = ''
                        }}
                        className="text-red-600 hover:text-red-800 text-sm underline"
                      >
                        Remover
                      </button>
                    </div>
                    <div className="py-8 bg-backgroundBeige">
                      <img
                        src={selectedImage ? URL.createObjectURL(selectedImage) : editingArticle.image}
                        alt="Preview"
                        className="max-w-full max-h-48 object-contain mx-auto"
                        onLoad={() => {
                          if (selectedImage) URL.revokeObjectURL(selectedImage)
                        }}
                      />
                    </div>
                  </div>
                )}

                {/* No Image Selected */}
                {!selectedImage && !(editingArticle && editingArticle.image) && (
                  <div className="text-[#5A2800] text-sm italic">
                    Nenhuma imagem selecionada
                  </div>
                )}
              </div>
            </div>

            {/* Submit Button */}
            <div className="flex justify-end">
              <button
                type="submit"
                disabled={loading || success}
                className="
                bg-[#0010CB] hover:bg-[#005EEE] text-[#FCD954] font-martel px-12 py-1 border-2 border-black rounded-md 
                [background:linear-gradient(180deg,#0a2bb8_0%,#0b42ff_38%,#0b4bff_50%,#0b35e2_62%,#08259d_100%)]
                disabled:opacity-50 disabled:cursor-not-allowed
                "
                style={{
                  textShadow: '-1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000',
                  boxShadow: 'inset 0 1px 0 rgba(255,255,255,.35), inset 0 -2px 0 rgba(0, 0, 0, 0.45), inset 0 0 0 1px #0a1f86'
                }}
              >
                {loading ? 'Carregando' : success ? (editingArticle ? 'Atualizado' : 'Publicado') : (editingArticle ? 'Atualizar' : 'Publicar')}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

export default NewArticleDialog
